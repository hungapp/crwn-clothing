{"ast":null,"code":"import _objectSpread from \"/Users/hungnguyen/Documents/ztm/crwn-clothing/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { takeLatest, put, call, all } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { signInSuccess, signInFailure } from './user.actions';\nimport { getCurrentUser } from '../../firebase/firebase.util';\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.util';\n\nfunction* getSnapshotFromUserAuth(userAuth) {\n  const userRef = yield call(createUserProfileDocument, userAuth);\n  const userSnapshot = yield userRef.get();\n  yield put(signInSuccess(_objectSpread({\n    id: userSnapshot.id\n  }, userSnapshot.data())));\n}\n\nfunction* signInWithGoogle() {\n  try {\n    const _ref = yield auth.signInWithPopup(googleProvider),\n          user = _ref.user;\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nfunction* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nfunction* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const _ref2 = yield auth.signInWithEmailAndPassword(email, password),\n          user = _ref2.user;\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nfunction* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nfunction* isUserAuthenticated() {\n  try {\n    yield;\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nfunction* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport default function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/Users/hungnguyen/Documents/ztm/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","call","all","UserActionTypes","signInSuccess","signInFailure","getCurrentUser","auth","googleProvider","createUserProfileDocument","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","signInWithGoogle","signInWithPopup","user","error","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgCC,GAAhC,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,SAASC,cAAT,QAA+B,8BAA/B;AAEA,SACEC,IADF,EAEEC,cAFF,EAGEC,yBAHF,QAIO,8BAJP;;AAMA,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4C;AAC1C,QAAMC,OAAO,GAAG,MAAMX,IAAI,CAACQ,yBAAD,EAA4BE,QAA5B,CAA1B;AACA,QAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,QAAMd,GAAG,CAACI,aAAa;AAAGW,IAAAA,EAAE,EAAEF,YAAY,CAACE;AAApB,KAA2BF,YAAY,CAACG,IAAb,EAA3B,EAAd,CAAT;AACD;;AAED,UAAUC,gBAAV,GAA6B;AAC3B,MAAI;AAAA,iBACe,MAAMV,IAAI,CAACW,eAAL,CAAqBV,cAArB,CADrB;AAAA,UACMW,IADN,QACMA,IADN;;AAEF,UAAMT,uBAAuB,CAACS,IAAD,CAA7B;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,UAAMpB,GAAG,CAACK,aAAa,CAACe,KAAD,CAAd,CAAT;AACD;AACF;;AAED,UAAUC,mBAAV,GAAgC;AAC9B,QAAMtB,UAAU,CAACI,eAAe,CAACmB,oBAAjB,EAAuCL,gBAAvC,CAAhB;AACD;;AAED,UAAUM,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AAC1D,MAAI;AAAA,kBACe,MAAMnB,IAAI,CAACoB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CADrB;AAAA,UACMP,IADN,SACMA,IADN;;AAEF,UAAMT,uBAAuB,CAACS,IAAD,CAA7B;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,UAAMpB,GAAG,CAACK,aAAa,CAACe,KAAD,CAAd,CAAT;AACD;AACF;;AAED,UAAUQ,kBAAV,GAA+B;AAC7B,QAAM7B,UAAU,CAACI,eAAe,CAAC0B,mBAAjB,EAAsCN,eAAtC,CAAhB;AACD;;AAED,UAAUO,mBAAV,GAAgC;AAC9B,MAAI;AACF;AACD,GAFD,CAEE,OAAOV,KAAP,EAAc;AACd,UAAMpB,GAAG,CAACK,aAAa,CAACe,KAAD,CAAd,CAAT;AACD;AACF;;AAED,UAAUW,kBAAV,GAA+B;AAC7B,QAAMhC,UAAU,CAACI,eAAe,CAAC6B,kBAAjB,EAAqCF,mBAArC,CAAhB;AACD;;AAED,eAAe,UAAUG,SAAV,GAAsB;AACnC,QAAM/B,GAAG,CAAC,CAACD,IAAI,CAACoB,mBAAD,CAAL,EAA4BpB,IAAI,CAAC2B,kBAAD,CAAhC,CAAD,CAAT;AACD","sourcesContent":["import { takeLatest, put, call, all } from 'redux-saga/effects';\n\nimport UserActionTypes from './user.types';\n\nimport { signInSuccess, signInFailure } from './user.actions';\n\nimport { getCurrentUser } from '../../firebase/firebase.util';\n\nimport {\n  auth,\n  googleProvider,\n  createUserProfileDocument\n} from '../../firebase/firebase.util';\n\nfunction* getSnapshotFromUserAuth(userAuth) {\n  const userRef = yield call(createUserProfileDocument, userAuth);\n  const userSnapshot = yield userRef.get();\n  yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n}\n\nfunction* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nfunction* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nfunction* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nfunction* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nfunction* isUserAuthenticated() {\n  try {\n    yield;\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nfunction* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport default function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}