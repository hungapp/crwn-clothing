{"ast":null,"code":"import _objectSpread from \"/Users/hungnguyen/Documents/ztm/crwn-clothing/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { takeLatest, put, call, all } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from './user.actions';\nimport { auth, googleProvider, getCurrentUser, createUserProfileDocument } from '../../firebase/firebase.util';\n\nfunction* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess(_objectSpread({\n      id: userSnapshot.id\n    }, userSnapshot.data())));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // sign in with Google\n\n\nfunction* signInWithGoogle() {\n  try {\n    const _ref = yield auth.signInWithPopup(googleProvider),\n          user = _ref.user;\n\n    yield console.log(user);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nfunction* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n} // sign in with email\n\n\nfunction* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const _ref2 = yield auth.signInWithEmailAndPassword(email, password),\n          user = _ref2.user;\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nfunction* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n} // check current user\n\n\nfunction* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nfunction* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n} // sign out\n\n\nfunction* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\n\nfunction* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n} // sign up\n\n\nfunction* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const _ref3 = yield auth.createUserWithEmailAndPassword(email, password),\n          user = _ref3.user;\n\n    const userCredentials = _objectSpread({}, user, {\n      displayName\n    });\n\n    yield put(signUpSuccess(userCredentials));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\n\nfunction* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\n\nfunction* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\n\nfunction* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n} // export\n\n\nexport default function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["/Users/hungnguyen/Documents/ztm/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","call","all","UserActionTypes","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","auth","googleProvider","getCurrentUser","createUserProfileDocument","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","signInWithGoogle","signInWithPopup","user","console","log","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","signOut","onSignOutStart","SIGN_OUT_START","signUp","displayName","createUserWithEmailAndPassword","userCredentials","signInAfterSignUp","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, call, all } from 'redux-saga/effects';\n\nimport UserActionTypes from './user.types';\n\nimport {\n  signInSuccess,\n  signInFailure,\n  signOutSuccess,\n  signOutFailure,\n  signUpSuccess,\n  signUpFailure\n} from './user.actions';\n\nimport {\n  auth,\n  googleProvider,\n  getCurrentUser,\n  createUserProfileDocument\n} from '../../firebase/firebase.util';\n\nfunction* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(\n      createUserProfileDocument,\n      userAuth,\n      additionalData\n    );\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\n// sign in with Google\nfunction* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    yield console.log(user);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nfunction* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\n// sign in with email\nfunction* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nfunction* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\n// check current user\nfunction* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nfunction* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\n// sign out\nfunction* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\n\nfunction* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\n\n// sign up\nfunction* signUp({ payload: { email, password, displayName } }) {\n  try {\n    const { user } = yield auth.createUserWithEmailAndPassword(email, password);\n    const userCredentials = { ...user, displayName };\n    yield put(signUpSuccess(userCredentials));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\n\nfunction* signInAfterSignUp({ payload: { user, additionalData } }) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\n\nfunction* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\n\nfunction* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\n\n// export\nexport default function* userSagas() {\n  yield all([\n    call(onGoogleSignInStart),\n    call(onEmailSignInStart),\n    call(onCheckUserSession),\n    call(onSignOutStart),\n    call(onSignUpStart),\n    call(onSignUpSuccess)\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}